// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChartData struct {
	Ids        []string    `json:"ids"`
	LegendData [][]*Label  `json:"legendData"`
	X          []*DataElem `json:"x"`
	Y          []*DataElem `json:"y"`
}

type DataElem struct {
	Name  string   `json:"name"`
	Value *float64 `json:"value"`
}

type Label struct {
	Name       string    `json:"name"`
	Value      int       `json:"value"`
	LabelType  LabelType `json:"labelType"`
	XAxis      *float64  `json:"xAxis"`
	XAxisLabel string    `json:"xAxisLabel"`
}

type LabelType string

const (
	LabelTypeMutable   LabelType = "MUTABLE"
	LabelTypeImmutable LabelType = "IMMUTABLE"
	LabelTypeXaxis     LabelType = "XAXIS"
)

var AllLabelType = []LabelType{
	LabelTypeMutable,
	LabelTypeImmutable,
	LabelTypeXaxis,
}

func (e LabelType) IsValid() bool {
	switch e {
	case LabelTypeMutable, LabelTypeImmutable, LabelTypeXaxis:
		return true
	}
	return false
}

func (e LabelType) String() string {
	return string(e)
}

func (e *LabelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LabelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LABEL_TYPE", str)
	}
	return nil
}

func (e LabelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
