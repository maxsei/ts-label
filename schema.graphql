enum LABEL_TYPE {
  MUTABLE
  IMMUTABLE
}

type Label {
  seriesGID: [ID]!
  name: ID
  labelType: LABEL_TYPE!
  min: Float
  max: Float
}

type Series {
  seriesGID: [ID]!
  name: ID
  values: [Float]
}

type Chart {
  seriesGID: [ID]!
  labels: [Label]
  x: Series
  y: [Series]
}

type Query {
  GetSeriesGIDs: [[ID!]] # Returns all seriesGID's
  GetChart(seriesGID: [ID]): Chart
}

type Mutation {
  # Label CRUD
  CreateLabel(seriesGID: [ID], name: ID, min: Float, max: Float): Label
  UpdateLabel(seriesGID: [ID], name: ID, min: Float, max: Float): Label
  DeleteLabel(seriesGID: [ID], name: ID): [ID] # Returns [*seriesGID, Label.name]

  # Series CRUD Returns [*seriesGID, series.name]
  CreateSeries(seriesGID: [ID], name: ID, values: [Float]): [ID]
  UpdateSeries(seriesGID: [ID], nameOld: ID, nameNew: ID): [ID]

  # # SeriesGID CRUD
  # CreateGID(seriesGID: [ID]) [ID]
  # CreateGID(seriesGIDNew: [ID], seriesGIDOld: [ID]) [ID]
  # # DeleteGID(seriesGID: [ID]) [ID]
}
